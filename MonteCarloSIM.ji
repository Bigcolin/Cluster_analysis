include("DGP.ji")
include("qgplsim.ji")
import Base.Threads.@threads

function MonteCarlo(n, γ, θ, α, β, alpha_type, nthreads = 1)
    fx = 1 # y = f(x), fx for different f(x)     
                # fx = 1, y = X*θ + Z*β + (X*α + Z*γ .- 1).^2 + 0.2ϵ
                # fx = 2, y = X*θ + Z*β + log.(1 .+ exp.(X*α + Z*γ .- 1)) + 0.2ϵ
    ifz = true # if false, Z = 0, i.e. no category varible
    τ = 0.5
    p = length(α)
    t = time()
    Theta0 = zeros(100, p)
    Alpha0 = zeros(100, p)
    Gamma0 = zeros(100, p)
    Beta0 = zeros(100, p)
    len = Int(100//nthreads)
    @threads for i in 1:nthreads # parallel on threads 
            for j in 1:len # each 25
        X, Z, y = dgp(n, γ, θ, α, β, fx, ifz)
        model_ij = qgplsim.model(X, Z, y, τ)

        Alpha0[len*(i - 1) + j, :], Theta0[len*(i - 1) + j, :],
        Gamma0[len*(i - 1) + j, :],Beta0[len*(i - 1) + j, :] = qgplsim.estimator(model_ij, alpha_type)
        end
    end
    println("MC Computing time: ", time() - t)

    set_alpha, dc, mc = qgplsim.collection(sign.(Alpha0))
    Alpha1 = Alpha0[dc[mc], :]
    Theta1 = Theta0[dc[mc], :]
    Gamma1 = Gamma0[dc[mc], :]
    Beta1 = Beta0[dc[mc], :]
#     Alpha, Theta, Gamma, Beta = Alpha1, Theta1, Gamma1, Beta1
    Alpha, Theta, Gamma, Beta = Alpha0, Theta0, Gamma0, Beta0

    ns, = size(Alpha)
    alpha = sum(Alpha, dims = 1)/ns
    theta = sum(Theta, dims = 1)/ns
    gamma = sum(Gamma, dims = 1)/ns
    beta = sum(Beta, dims = 1)/ns
    vara = var(Alpha, dims = 1)
    vart = var(Theta, dims = 1)
    varg = var(Gamma, dims = 1)
    varb = var(Beta, dims = 1)
    res = Dict(:α1 => alpha[1], :α2 => alpha[2],
              :θ1 => theta[1], :θ2 => theta[2],
              :γ1 => gamma[1], :γ2 => gamma[2],
              :β1 => beta[1], :β2 => beta[2],
              :var_α1 => vara[1], :var_α2 => vara[2],
              :var_θ1 => vart[1], :var_θ2 => vart[2],
              :var_γ1 => varg[1], :var_γ2 => varg[2],
              :var_β1 => varb[1], :var_β2 => varb[2])

    res


end

# α = [1.0, -1.0] # single index for x
# θ = [1.0, 1.0]  # linear for x, <α, θ> = 0 for identification
# γ = [0.001, 0.001] # single index for z
# β = [0.5, -1.0] # linear for z
# # Q(y|x, z) = Xθ + Zβ + g(Xα + Zγ)

# n = 250


# alpha_type = 1

# @time Alpha, Theta, Gamma, Beta =  MonteCarlo(n, γ, θ, α, β, alpha_type)
